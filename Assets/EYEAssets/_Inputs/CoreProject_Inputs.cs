//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/EYEAssets/_Inputs/CoreProject_Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CoreProject_Inputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CoreProject_Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CoreProject_Inputs"",
    ""maps"": [
        {
            ""name"": ""Interactions"",
            ""id"": ""5c275fed-651c-49fb-9d94-7fe91fa6d09b"",
            ""actions"": [
                {
                    ""name"": ""Interaction Key"",
                    ""type"": ""Button"",
                    ""id"": ""ebb76e1c-d608-4229-93e6-173bedfadd18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractionHold"",
                    ""type"": ""Button"",
                    ""id"": ""db0a5df2-6dac-4462-b14c-dfdd818e3d5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4e6679a6-e2ef-48ee-97ef-08273b8fdd8f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f0c5aac-d607-4439-b8cf-f923c78f7646"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractionHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""609f6fc2-a95c-43fe-8085-60171f4e8ceb"",
            ""actions"": [
                {
                    ""name"": ""PlayerMovement"",
                    ""type"": ""Button"",
                    ""id"": ""7eebc7fa-8866-456b-adc1-c19f04da0fce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerRotation"",
                    ""type"": ""Button"",
                    ""id"": ""d5005f46-e914-4aba-be2d-b909be6bee31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""99bc480d-08bf-40a6-bbd7-a6675ef52f50"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""411c02b7-8e54-4b7a-9cf9-9ea08d580a4c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f9889114-50a9-4b5e-b677-712fffde31d0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fd151b48-3964-463d-a703-54697f0311d0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerRotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4936c64e-37be-4475-aba3-0d7226ac0515"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1a103320-01f4-44c9-a453-335e177ed6d7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Drone"",
            ""id"": ""53f3f592-37be-4db5-bcf6-18ee634aa7f9"",
            ""actions"": [
                {
                    ""name"": ""MoveDrone"",
                    ""type"": ""Button"",
                    ""id"": ""5dd282e7-c820-4ab9-81c6-6e18543d0553"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateDrone"",
                    ""type"": ""Button"",
                    ""id"": ""37ac01af-de90-48ec-ade8-12e51e95888e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Elevation"",
                    ""type"": ""Button"",
                    ""id"": ""bb070c75-c5d3-40c3-985d-60a4b830fccf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e48f1edc-6de7-4afd-ba51-99d502660350"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Elevation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8882c48c-9a27-49be-b3a0-16a69f7112b2"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Elevation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e325b37f-07e4-499a-974a-f74f9544745b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Elevation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2e39ef12-94cb-4fa5-afa9-566f940216fb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDrone"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""59af06a3-f030-4742-a03b-43822398f8c0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDrone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c80c0566-7e97-436b-8b7e-bd0e618d2f36"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDrone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a210388a-696f-436a-9e88-0178908ab4ae"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateDrone"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""65f00c14-c3db-4c65-b0f9-dc39561ff5db"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateDrone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d6d92300-e057-420e-a534-e68f8358ee31"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateDrone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Forklift"",
            ""id"": ""06e7d121-5419-47f6-ac72-080fa875ae48"",
            ""actions"": [
                {
                    ""name"": ""MoveForklift"",
                    ""type"": ""Value"",
                    ""id"": ""dc6f14c3-fac3-4eec-9137-4f18a2a50531"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RaiseLowerForks"",
                    ""type"": ""Button"",
                    ""id"": ""81ee6c8b-9fb1-429b-866b-6e577738e2a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6af8d190-08f2-4adb-ab95-7ba137350782"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForklift"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""18225e03-c928-49b7-b2f6-9b1fbade09cb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForklift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f94231c6-fec6-47a5-9f28-31ef177e4abc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForklift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6fb42d33-6f65-4ba3-a3a1-18bcc10f4b1f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForklift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""63d6ac3c-5cbf-429a-b7d0-4dd230c22d60"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForklift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""50a2a8e2-fcb0-4371-8e3d-35f87fdb778e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RaiseLowerForks"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""76df1305-02ce-47d8-90aa-d1960b20b79c"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RaiseLowerForks"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b1e97ef2-9848-46d3-aef6-d979769ab1cf"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RaiseLowerForks"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Interactions
        m_Interactions = asset.FindActionMap("Interactions", throwIfNotFound: true);
        m_Interactions_InteractionKey = m_Interactions.FindAction("Interaction Key", throwIfNotFound: true);
        m_Interactions_InteractionHold = m_Interactions.FindAction("InteractionHold", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_PlayerMovement = m_Player.FindAction("PlayerMovement", throwIfNotFound: true);
        m_Player_PlayerRotation = m_Player.FindAction("PlayerRotation", throwIfNotFound: true);
        // Drone
        m_Drone = asset.FindActionMap("Drone", throwIfNotFound: true);
        m_Drone_MoveDrone = m_Drone.FindAction("MoveDrone", throwIfNotFound: true);
        m_Drone_RotateDrone = m_Drone.FindAction("RotateDrone", throwIfNotFound: true);
        m_Drone_Elevation = m_Drone.FindAction("Elevation", throwIfNotFound: true);
        // Forklift
        m_Forklift = asset.FindActionMap("Forklift", throwIfNotFound: true);
        m_Forklift_MoveForklift = m_Forklift.FindAction("MoveForklift", throwIfNotFound: true);
        m_Forklift_RaiseLowerForks = m_Forklift.FindAction("RaiseLowerForks", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Interactions
    private readonly InputActionMap m_Interactions;
    private IInteractionsActions m_InteractionsActionsCallbackInterface;
    private readonly InputAction m_Interactions_InteractionKey;
    private readonly InputAction m_Interactions_InteractionHold;
    public struct InteractionsActions
    {
        private @CoreProject_Inputs m_Wrapper;
        public InteractionsActions(@CoreProject_Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @InteractionKey => m_Wrapper.m_Interactions_InteractionKey;
        public InputAction @InteractionHold => m_Wrapper.m_Interactions_InteractionHold;
        public InputActionMap Get() { return m_Wrapper.m_Interactions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionsActions set) { return set.Get(); }
        public void SetCallbacks(IInteractionsActions instance)
        {
            if (m_Wrapper.m_InteractionsActionsCallbackInterface != null)
            {
                @InteractionKey.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnInteractionKey;
                @InteractionKey.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnInteractionKey;
                @InteractionKey.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnInteractionKey;
                @InteractionHold.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnInteractionHold;
                @InteractionHold.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnInteractionHold;
                @InteractionHold.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnInteractionHold;
            }
            m_Wrapper.m_InteractionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @InteractionKey.started += instance.OnInteractionKey;
                @InteractionKey.performed += instance.OnInteractionKey;
                @InteractionKey.canceled += instance.OnInteractionKey;
                @InteractionHold.started += instance.OnInteractionHold;
                @InteractionHold.performed += instance.OnInteractionHold;
                @InteractionHold.canceled += instance.OnInteractionHold;
            }
        }
    }
    public InteractionsActions @Interactions => new InteractionsActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_PlayerMovement;
    private readonly InputAction m_Player_PlayerRotation;
    public struct PlayerActions
    {
        private @CoreProject_Inputs m_Wrapper;
        public PlayerActions(@CoreProject_Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerMovement => m_Wrapper.m_Player_PlayerMovement;
        public InputAction @PlayerRotation => m_Wrapper.m_Player_PlayerRotation;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @PlayerMovement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerMovement;
                @PlayerMovement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerMovement;
                @PlayerMovement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerMovement;
                @PlayerRotation.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerRotation;
                @PlayerRotation.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerRotation;
                @PlayerRotation.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerRotation;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlayerMovement.started += instance.OnPlayerMovement;
                @PlayerMovement.performed += instance.OnPlayerMovement;
                @PlayerMovement.canceled += instance.OnPlayerMovement;
                @PlayerRotation.started += instance.OnPlayerRotation;
                @PlayerRotation.performed += instance.OnPlayerRotation;
                @PlayerRotation.canceled += instance.OnPlayerRotation;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Drone
    private readonly InputActionMap m_Drone;
    private IDroneActions m_DroneActionsCallbackInterface;
    private readonly InputAction m_Drone_MoveDrone;
    private readonly InputAction m_Drone_RotateDrone;
    private readonly InputAction m_Drone_Elevation;
    public struct DroneActions
    {
        private @CoreProject_Inputs m_Wrapper;
        public DroneActions(@CoreProject_Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveDrone => m_Wrapper.m_Drone_MoveDrone;
        public InputAction @RotateDrone => m_Wrapper.m_Drone_RotateDrone;
        public InputAction @Elevation => m_Wrapper.m_Drone_Elevation;
        public InputActionMap Get() { return m_Wrapper.m_Drone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneActions set) { return set.Get(); }
        public void SetCallbacks(IDroneActions instance)
        {
            if (m_Wrapper.m_DroneActionsCallbackInterface != null)
            {
                @MoveDrone.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnMoveDrone;
                @MoveDrone.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnMoveDrone;
                @MoveDrone.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnMoveDrone;
                @RotateDrone.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotateDrone;
                @RotateDrone.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotateDrone;
                @RotateDrone.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotateDrone;
                @Elevation.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnElevation;
                @Elevation.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnElevation;
                @Elevation.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnElevation;
            }
            m_Wrapper.m_DroneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveDrone.started += instance.OnMoveDrone;
                @MoveDrone.performed += instance.OnMoveDrone;
                @MoveDrone.canceled += instance.OnMoveDrone;
                @RotateDrone.started += instance.OnRotateDrone;
                @RotateDrone.performed += instance.OnRotateDrone;
                @RotateDrone.canceled += instance.OnRotateDrone;
                @Elevation.started += instance.OnElevation;
                @Elevation.performed += instance.OnElevation;
                @Elevation.canceled += instance.OnElevation;
            }
        }
    }
    public DroneActions @Drone => new DroneActions(this);

    // Forklift
    private readonly InputActionMap m_Forklift;
    private IForkliftActions m_ForkliftActionsCallbackInterface;
    private readonly InputAction m_Forklift_MoveForklift;
    private readonly InputAction m_Forklift_RaiseLowerForks;
    public struct ForkliftActions
    {
        private @CoreProject_Inputs m_Wrapper;
        public ForkliftActions(@CoreProject_Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveForklift => m_Wrapper.m_Forklift_MoveForklift;
        public InputAction @RaiseLowerForks => m_Wrapper.m_Forklift_RaiseLowerForks;
        public InputActionMap Get() { return m_Wrapper.m_Forklift; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ForkliftActions set) { return set.Get(); }
        public void SetCallbacks(IForkliftActions instance)
        {
            if (m_Wrapper.m_ForkliftActionsCallbackInterface != null)
            {
                @MoveForklift.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMoveForklift;
                @MoveForklift.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMoveForklift;
                @MoveForklift.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMoveForklift;
                @RaiseLowerForks.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnRaiseLowerForks;
                @RaiseLowerForks.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnRaiseLowerForks;
                @RaiseLowerForks.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnRaiseLowerForks;
            }
            m_Wrapper.m_ForkliftActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveForklift.started += instance.OnMoveForklift;
                @MoveForklift.performed += instance.OnMoveForklift;
                @MoveForklift.canceled += instance.OnMoveForklift;
                @RaiseLowerForks.started += instance.OnRaiseLowerForks;
                @RaiseLowerForks.performed += instance.OnRaiseLowerForks;
                @RaiseLowerForks.canceled += instance.OnRaiseLowerForks;
            }
        }
    }
    public ForkliftActions @Forklift => new ForkliftActions(this);
    public interface IInteractionsActions
    {
        void OnInteractionKey(InputAction.CallbackContext context);
        void OnInteractionHold(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnPlayerMovement(InputAction.CallbackContext context);
        void OnPlayerRotation(InputAction.CallbackContext context);
    }
    public interface IDroneActions
    {
        void OnMoveDrone(InputAction.CallbackContext context);
        void OnRotateDrone(InputAction.CallbackContext context);
        void OnElevation(InputAction.CallbackContext context);
    }
    public interface IForkliftActions
    {
        void OnMoveForklift(InputAction.CallbackContext context);
        void OnRaiseLowerForks(InputAction.CallbackContext context);
    }
}
